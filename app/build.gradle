apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.hxw.androiddemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //为解决Warning:Conflict with dependency 'com.google.code.findbugs:jsr305'.
    // Resolved versions for app (3.0.1) and test app (2.0.1) differ.
    // See http://g.co/androidstudio/app-test-app-conflict for details.
    //的问题引进的,这是测试包和RxLifecycle引入的jsr305的版本不一样，这里统一成3.0.1
//    configurations.all {
//        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
    compile rootProject.ext.dependencies["appcompat"]
    compile rootProject.ext.dependencies["constraint-layout"]
    compile rootProject.ext.dependencies["support-vector-drawable"]
    testCompile 'junit:junit:4.12'
    //这是编译需要,否则注入不会自动生成文件
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    //ButterKnife https://github.com/JakeWharton/butterknife
    //这是编译需要,否则注入不会自动生成文件(annotationProcessor 引入的话估计在各个library中都需要,只要是
    //需要编译生成文件)
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
//    annotationProcessor rootProject.ext.dependencies["glide.compiler"]
    compile project(':frame')

    //BaseRecyclerViewAdapterHelper https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    compile rootProject.ext.dependencies["base-recyclerview-adapter"]
    //boxing https://github.com/Bilibili/boxing bilibili的多媒体选择器
    compile rootProject.ext.dependencies["boxing"]
    //zxing核心库 https://github.com/zxing/zxing
    compile rootProject.ext.dependencies["zxing-core"]
    //UltraViewPager https://github.com/alibaba/UltraViewPager
    compile (rootProject.ext.dependencies["UltraViewPager"]) {
        transitive = true
    }

    //QRCodeReaderView https://github.com/dlazaro66/QRCodeReaderView
    compile rootProject.ext.dependencies["QRCodeReaderView"]

    compile 'com.hxw.input:input:1.0.4'
    compile 'com.hxw.elasticscroll:elasticscroll:1.0.0'
}
